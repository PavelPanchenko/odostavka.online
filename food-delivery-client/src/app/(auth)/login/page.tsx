'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Mail, Lock, Eye, EyeOff } from 'lucide-react';
import { signIn } from 'next-auth/react';
import NextAuthGoogleButton from '@/components/NextAuthGoogleButton';
import { getAuthErrorMessage } from '@/lib/authErrors';
import { useSession } from 'next-auth/react';

export default function LoginPage() {
  const router = useRouter();
  const { status } = useSession();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [googleLoading, setGoogleLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      if (process.env.NODE_ENV === 'development') console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ email/password —Å NextAuth');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º NextAuth signIn —Å credentials provider
      const result = await signIn('credentials', {
        email,
        password,
        redirect: false,
      });

      if (process.env.NODE_ENV === 'development') console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç NextAuth signIn:', result);

      if (result?.error) {
        const raw = String(result.error || '');
        if (raw.includes('EMAIL_NOT_VERIFIED')) {
          console.warn('‚ö†Ô∏è Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–≤–æ–¥ –∫–æ–¥–∞');
          router.push(`/verify-email?email=${encodeURIComponent(email)}`);
          return;
        }
        const message = getAuthErrorMessage(result.error);
        if (process.env.NODE_ENV === 'development') console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', message);
        setError(message);
      } else if (result?.ok) {
        if (process.env.NODE_ENV === 'development') console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å');
        router.replace('/profile');
      }
    } catch (err: any) {
      if (process.env.NODE_ENV === 'development') console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
      setError(err.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.');
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSuccess = () => {
    console.log('‚úÖ Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å');
    router.push('/profile');
  };

  const handleGoogleError = (error: string) => {
    setError(error);
    setGoogleLoading(false);
  };

  // –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —É—Ö–æ–¥–∏–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (status === 'authenticated') {
      router.replace('/profile');
      return;
    }
  }, [status, router]);

  return (
    <div className="h-full bg-gray-50 flex flex-col">
      {/* Content */}
      <div className="flex-1 overflow-y-auto">
        <div className="max-w-md mx-auto px-4 py-8">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">–í—Ö–æ–¥</h1>
            <p className="text-gray-600">–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</p>
          </div>

          {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ–æ—Ä–º—ã */}
          <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-6">
            {/* –û—à–∏–±–∫–∞ */}
            {error && (
              <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-sm text-red-600">{error}</p>
              </div>
            )}

            {/* –§–æ—Ä–º–∞ */}
            <form onSubmit={handleSubmit} className="space-y-5">
              {/* Email */}
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                  Email
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    id="email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all"
                    placeholder="your@email.com"
                    required
                  />
                </div>
              </div>

              {/* –ü–∞—Ä–æ–ª—å */}
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                  –ü–∞—Ä–æ–ª—å
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all"
                    placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ */}
              <button
                type="submit"
                disabled={loading}
                className="w-full bg-green-600 text-white py-3 rounded-xl font-semibold hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <span className="flex items-center justify-center">
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    –í—Ö–æ–¥...
                  </span>
                ) : (
                  '–í–æ–π—Ç–∏'
                )}
              </button>
            </form>

            {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
            <div className="relative my-6">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">–∏–ª–∏</span>
              </div>
            </div>

            {/* Google –≤—Ö–æ–¥ */}
            <NextAuthGoogleButton
              onLoading={setGoogleLoading}
              onSuccess={handleGoogleSuccess}
              onError={handleGoogleError}
            />

            {/* –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é */}
            <p className="mt-6 text-center text-sm text-gray-600">
              –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
              <button
                onClick={() => router.push('/register')}
                className="text-green-600 hover:text-green-700 font-semibold transition-colors"
              >
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
              </button>
            </p>

            {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è */}
            <p className="mt-3 text-center text-sm text-gray-600">
              –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?{' '}
              <button
                onClick={() => router.push('/forgot-password')}
                className="text-green-600 hover:text-green-700 font-semibold transition-colors"
              >
                –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
              </button>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

