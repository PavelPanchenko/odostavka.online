'use client';

import { useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useAuthStore } from '@/store/auth';
import { authAPI } from '@/lib/api';
import { signOut } from 'next-auth/react';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ NextAuth —Å–µ—Å—Å–∏–∏ —Å Zustand store
 */
export default function AuthSync() {
  const { data: session, status } = useSession();
  const { setUser, setAuthenticated } = useAuthStore();

  useEffect(() => {
    if (process.env.NODE_ENV === 'development') console.log('üîÑ AuthSync: —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ -', status);
    
    if (status === 'authenticated' && session) {
      if (process.env.NODE_ENV === 'development') console.log('‚úÖ AuthSync: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', (session as any)?.user);
      
      const backendAccessToken = (session as any)?.backend_access_token as string | undefined;
      const backendRefreshToken = (session as any)?.backend_refresh_token as string | undefined;
      const hasBackendTokens = !!(backendAccessToken && backendRefreshToken);

      if (hasBackendTokens) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –≥—Ä—É–∑–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ API
        localStorage.setItem('access_token', backendAccessToken as string);
        localStorage.setItem('refresh_token', backendRefreshToken as string);
        if (process.env.NODE_ENV === 'development') console.log('‚úÖ AuthSync: —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');

        authAPI.getMe()
          .then((me) => {
            const userData = {
              id: me.id,
              email: me.email,
              username: me.username,
              name: (me as any).name ?? (me as any).full_name ?? '',
              phone: (me as any).phone,
              address: (me as any).address,
              telegram_user_id: (me as any).telegram_user_id,
            };
            setUser(userData);
            setAuthenticated(true);
            if (process.env.NODE_ENV === 'development') console.log('‚úÖ AuthSync: –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ API');
          })
          .catch((err) => {
            if (process.env.NODE_ENV === 'development') console.warn('‚ö†Ô∏è AuthSync: getMe failed, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', err);
            // –¢–æ–∫–µ–Ω—ã –µ—Å—Ç—å, –Ω–æ –±—ç–∫–µ–Ω–¥ –Ω–µ –ø—Ä–∏–Ω—è–ª ‚Äî —Å—á–∏—Ç–∞–µ–º —Å–µ—Å—Å–∏—é –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π
            try {
              localStorage.removeItem('access_token');
              localStorage.removeItem('refresh_token');
            } catch {}
            setUser(null);
            setAuthenticated(false);
            // –†–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º NextAuth, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–ª unauthenticated
            signOut({ redirect: false }).catch(() => {});
          });
      } else {
        // –ù–µ—Ç backend-—Ç–æ–∫–µ–Ω–æ–≤ ‚Äî –Ω–µ –¥–µ—Ä–≥–∞–µ–º –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
        const sUser: any = (session as any)?.user || {};
        const fallbackUser = {
          id: parseInt(String(sUser.id)) || 0,
          email: sUser.email || '',
          username: sUser.username || sUser.email?.split('@')[0] || '',
          name: sUser.name || '',
          phone: undefined,
          address: undefined,
        };
        setUser(fallbackUser);
        setAuthenticated(true);
      }
    } else if (status === 'unauthenticated') {
      // –ü—Ä–∏ –ø–æ–ª–Ω–æ–π —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ NextAuth –∏–∑–±–µ–≥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ localStorage —Ç–æ–∫–µ–Ω–∞–º
      setUser(null);
      setAuthenticated(false);
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
    }
  }, [session, status, setUser, setAuthenticated]);

  return null; // –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ
}

