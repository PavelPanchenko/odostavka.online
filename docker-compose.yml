services:
  # API сервис (подключается к удаленной БД)
  api:
    build:
      context: ./food-delivery-api
      dockerfile: ./Dockerfile
    container_name: food_delivery_api
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DATABASE_HOST}:5432/${POSTGRES_DB}
      - REDIS_URL=redis://${REDIS_HOST}:6379
    networks:
      - food_delivery_network
    restart: unless-stopped

  # Клиент
  client:
    build:
      context: ./food-delivery-client
      dockerfile: ./Dockerfile
    container_name: food_delivery_client
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${CLIENT_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_API_DOMAIN=${CLIENT_API_DOMAIN:-localhost}
    networks:
      - food_delivery_network
    restart: unless-stopped

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: food_delivery_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - api
      - client
    networks:
      - food_delivery_network
    restart: unless-stopped

networks:
  food_delivery_network:
    driver: bridge
