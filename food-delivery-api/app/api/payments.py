"""
API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mock-—Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
from fastapi import APIRouter, Depends, HTTPException, status, Request
from sqlalchemy.orm import Session
from typing import List
from datetime import datetime

from app.db.database import get_db
from app.models.payment import Payment
from app.models.order import Order
from app.models.user import User
from app.schemas.payment import PaymentCreate, PaymentResponse, PaymentStatusUpdate
from app.services.auth_service import AuthService
from app.services.payment_mock_service import PaymentMockService
from app.core.config import settings

router = APIRouter()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º mock-—Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å
payment_service = PaymentMockService()


@router.post("/create", response_model=PaymentResponse, status_code=status.HTTP_201_CREATED)
async def create_payment(
    payment_data: PaymentCreate,
    current_user: User = Depends(AuthService.get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    order = db.query(Order).filter(
        Order.id == payment_data.order_id,
        Order.user_id == current_user.id
    ).first()
    
    if not order:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    existing_payment = db.query(Payment).filter(
        Payment.order_id == order.id,
        Payment.status == "succeeded"
    ).first()
    
    if existing_payment:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω"
        )
    
    try:
        # –°–æ–∑–¥–∞–µ–º mock-–ø–ª–∞—Ç–µ–∂ (–∑–∞–≥–ª—É—à–∫–∞)
        mock_response = payment_service.create_payment(
            order_id=order.id,
            amount=payment_data.amount,
            description=payment_data.description or f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}",
            user_id=current_user.id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏ URL "–æ–ø–ª–∞—Ç—ã"
        payment_id = mock_response.get("id")
        confirmation_url = mock_response.get("confirmation_url")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
        db_payment = Payment(
            order_id=order.id,
            yookassa_payment_id=payment_id,
            amount=payment_data.amount,
            currency="RUB",
            status="pending",  # –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã
            description=payment_data.description or f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}",
            confirmation_url=confirmation_url,
            is_test=True  # Mock —Ä–µ–∂–∏–º
        )
        
        db.add(db_payment)
        db.commit()
        db.refresh(db_payment)
        
        print(f"‚úÖ Mock payment created: {db_payment.id}, Payment ID: {payment_id}")
        
        return db_payment
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Payment creation error: {str(e)}")
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"
        )


@router.get("/check-status/{payment_id}")
async def check_payment_status(
    payment_id: int,
    current_user: User = Depends(AuthService.get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ mock-–ø–ª–∞—Ç–µ–∂–∞
    –í mock-—Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    """
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç—ë–∂ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã
        payment = db.query(Payment).join(Order).filter(
            Payment.id == payment_id,
            Order.user_id == current_user.id
        ).first()
        
        if not payment:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å mock-–ø–ª–∞—Ç–µ–∂–∞ (–≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ)
        mock_status = payment_service.check_payment_status(payment.yookassa_payment_id)
        
        print(f"üì• Mock status check: {mock_status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π
        payment.status = "succeeded"
        payment.paid_at = datetime.now()
        payment.payment_method_type = "mock"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order = db.query(Order).filter(Order.id == payment.order_id).first()
        if order:
            order.status = "confirmed"
            print(f"‚úÖ Order {order.id} marked as confirmed (mock paid)")
        
        db.commit()
        db.refresh(payment)
        
        print(f"‚úÖ Mock payment {payment.id} marked as succeeded")
        
        return {
            "status": "success",
            "payment": payment
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Status check error: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        )


@router.get("/{payment_id}", response_model=PaymentResponse)
async def get_payment(
    payment_id: int,
    current_user: User = Depends(AuthService.get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    
    payment = db.query(Payment).join(Order).filter(
        Payment.id == payment_id,
        Order.user_id == current_user.id
    ).first()
    
    if not payment:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    return payment


@router.get("/order/{order_id}", response_model=List[PaymentResponse])
async def get_order_payments(
    order_id: int,
    current_user: User = Depends(AuthService.get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∑–∞–∫–∞–∑—É"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    order = db.query(Order).filter(
        Order.id == order_id,
        Order.user_id == current_user.id
    ).first()
    
    if not order:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    payments = db.query(Payment).filter(Payment.order_id == order_id).all()
    
    return payments

