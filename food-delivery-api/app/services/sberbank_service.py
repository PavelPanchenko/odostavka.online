"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –°–±–µ—Ä–±–∞–Ω–∫ Acquiring
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://securepayments.sberbank.ru/wiki/doku.php/integration:api:rest:start
"""
import requests
import urllib3
from typing import Dict, Optional
from app.core.config import settings

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class SberbankService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ –°–±–µ—Ä–±–∞–Ω–∫ Acquiring"""
    
    def __init__(self):
        self.api_url = settings.sberbank_api_url
        self.username = settings.sberbank_username
        self.password = settings.sberbank_password
        self.return_url = settings.sberbank_return_url
        self.fail_url = settings.sberbank_fail_url
    
    def _make_request(self, endpoint: str, data: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –°–±–µ—Ä–±–∞–Ω–∫–∞"""
        url = f"{self.api_url}/{endpoint}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        data.update({
            "userName": self.username,
            "password": self.password
        })
        
        print(f"üè¶ Sberbank API request: {endpoint}")
        print(f"   Data: {data}")
        
        try:
            # –°–±–µ—Ä–±–∞–Ω–∫ API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç application/x-www-form-urlencoded –≤–º–µ—Å—Ç–æ JSON
            # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã –°–±–µ—Ä–±–∞–Ω–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL
            # –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ verify=True
            response = requests.post(url, data=data, timeout=30, verify=False)
            result = response.json()
            
            print(f"   Response: {result}")
            
            return result
        except Exception as e:
            print(f"‚ùå Sberbank API error: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å–æ –°–±–µ—Ä–±–∞–Ω–∫–æ–º: {str(e)}")
    
    def register_order(
        self,
        order_number: str,
        amount: float,
        description: str,
        client_id: Optional[str] = None
    ) -> Dict:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ –≤ –°–±–µ—Ä–±–∞–Ω–∫–µ
        
        Args:
            order_number: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –º–∞–≥–∞–∑–∏–Ω–∞
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö (–±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∏)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã
        
        Returns:
            {
                "orderId": "70906e55-7114-41d6-8332-4609dc6590f4",
                "formUrl": "https://3dsec.sberbank.ru/payment/merchants/..."
            }
        """
        # –°–±–µ—Ä–±–∞–Ω–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞)
        amount_kopeks = int(amount * 100)
        
        data = {
            "orderNumber": order_number,
            "amount": amount_kopeks,
            "currency": "643",  # RUB (ISO 4217)
            "returnUrl": self.return_url,
            "failUrl": self.fail_url,
            "description": description,
            "language": "ru"
        }
        
        if client_id:
            data["clientId"] = client_id
        
        return self._make_request("register.do", data)
    
    def get_order_status(self, order_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –°–±–µ—Ä–±–∞–Ω–∫–∞
        
        Returns:
            {
                "OrderStatus": 2,  # 0-–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, 1-–ü—Ä–µ–¥–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, 2-–û–ø–ª–∞—á–µ–Ω, 3-–í–æ–∑–≤—Ä–∞—Ç, 4-–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, 5-–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä, 6-–û—Ç–∫–ª–æ–Ω–µ–Ω
                "OrderNumber": "order_123",
                "Pan": "411111**1111",
                "Amount": 50000,  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                ...
            }
        """
        data = {"orderId": order_id}
        return self._make_request("getOrderStatus.do", data)
    
    def get_order_status_extended(self, order_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç—É—Å–µ –∫–∞—Ä—Ç—ã –∏ –¥—Ä.
        """
        data = {"orderId": order_id}
        return self._make_request("getOrderStatusExtended.do", data)
    
    def reverse_order(self, order_id: str, amount: Optional[float] = None) -> Dict:
        """
        –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ (–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤)
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –°–±–µ—Ä–±–∞–Ω–∫–∞
            amount: –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (–µ—Å–ª–∏ None - –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç)
        """
        data = {"orderId": order_id}
        
        if amount is not None:
            data["amount"] = int(amount * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        
        return self._make_request("reverse.do", data)
    
    def refund_order(self, order_id: str, amount: float) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –°–±–µ—Ä–±–∞–Ω–∫–∞
            amount: –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö
        """
        data = {
            "orderId": order_id,
            "amount": int(amount * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        }
        
        return self._make_request("refund.do", data)
    
    @staticmethod
    def get_order_status_text(status: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        statuses = {
            0: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
            1: "–ü—Ä–µ–¥–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
            2: "–û–ø–ª–∞—á–µ–Ω",
            3: "–í–æ–∑–≤—Ä–∞—â—ë–Ω",
            4: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            5: "–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            6: "–û—Ç–∫–ª–æ–Ω—ë–Ω"
        }
        return statuses.get(status, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å ({status})")
    
    @staticmethod
    def is_payment_successful(status_response: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω—ã–º"""
        order_status = status_response.get("OrderStatus") or status_response.get("orderStatus")
        return order_status == 2  # 2 = –û–ø–ª–∞—á–µ–Ω

